version: '3'

vars:
  KUBECONFIG: ./infra/terraform/kubeconfig.yaml
  TERRAFORM_DIR: ./infra/terraform
  K8S_DIR: ./infra/k8s
  APPS_DIR: ./apps

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task --list

  # Development tasks
  dev:items-app:
    desc: Run items-app in development mode with hot reload
    dir: apps/items-app
    cmds:
      - bun install && bun run dev

  dev:items-app:postgres:
    desc: Run items-app locally with PostgreSQL connection (requires port-forward)
    dir: apps/items-app
    cmds:
      - |
        echo "Make sure PostgreSQL is port-forwarded: task postgres:port-forward"
        echo "Loading credentials from .env..."
        set -a
        source ../../.env
        set +a
        export DB_HOST=localhost
        export DB_PORT=5432
        export DB_USER=$POSTGRES_USER
        export DB_PASSWORD=$POSTGRES_PASSWORD
        export DB_NAME=$POSTGRES_DB
        bun install && bun run dev

  dev:website-app:
    desc: Run website-app in development mode with hot reload
    dir: apps/website-app
    cmds:
      - bun install && bun run dev

  # Docker tasks
  docker:build:items-app:
    desc: Build Docker image for items-app
    cmds:
      - docker build -t items-app:local ./apps/items-app

  docker:build:website-app:
    desc: Build Docker image for website-app
    cmds:
      - docker build -t website-app:local ./apps/website-app

  docker:build:all:
    desc: Build Docker images for all apps
    cmds:
      - task: docker:build:items-app
      - task: docker:build:website-app

  docker:run:items-app:
    desc: Run items-app Docker container locally
    cmds:
      - docker run --rm -p 8080:8080 items-app:local

  docker:run:website-app:
    desc: Run website-app Docker container locally
    cmds:
      - docker run --rm -p 8080:8080 website-app:local

  # Terraform tasks
  tf:init:
    desc: Initialize Terraform
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform init

  tf:plan:
    desc: Run Terraform plan
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform plan

  tf:apply:
    desc: Apply Terraform configuration
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform apply

  tf:destroy:
    desc: Destroy Terraform infrastructure
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform destroy

  tf:output:
    desc: Show Terraform outputs
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform output

  tf:get-ip:
    desc: Get server IP from Terraform
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - terraform output -raw server_ip

  # Kubernetes tasks
  k8s:config:
    desc: Set KUBECONFIG environment variable
    cmds:
      - echo "export KUBECONFIG={{.KUBECONFIG}}"

  k8s:get-pods:
    desc: Get all pods
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get pods

  k8s:get-services:
    desc: Get all services
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get services

  k8s:get-ingress:
    desc: Get all ingress resources
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get ingress

  k8s:get-all:
    desc: Get all Kubernetes resources
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get all

  k8s:logs:items-app:
    desc: Get logs from items-app
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} logs -l app=items-app --tail=100 -f

  k8s:logs:website-app:
    desc: Get logs from website-app
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} logs -l app=website-app --tail=100 -f

  k8s:describe:items-app:
    desc: Describe items-app deployment
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} describe deployment items-app

  k8s:describe:website-app:
    desc: Describe website-app deployment
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} describe deployment website-app

  # Deployment tasks
  deploy:items-app:
    desc: Deploy items-app to Kubernetes
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/apps/items-app-deployment.yaml
      - echo "✅ items-app deployed"
      - echo "Waiting for rollout to complete..."
      - kubectl --kubeconfig={{.KUBECONFIG}} rollout status deployment/items-app --timeout=120s

  deploy:website-app:
    desc: Deploy website-app to Kubernetes
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/apps/website-app-deployment.yaml

  deploy:all:
    desc: Deploy all apps to Kubernetes
    cmds:
      - task: deploy:items-app
      - task: deploy:website-app

  deploy:items-app:with-postgres:
    desc: Deploy PostgreSQL and items-app together
    cmds:
      - task: deploy:postgres
      - echo "Waiting for PostgreSQL to be ready before deploying items-app..."
      - sleep 5
      - task: deploy:items-app
      - echo "✅ PostgreSQL and items-app deployed successfully!"

  deploy:cert-manager:
    desc: Deploy cert-manager
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml

  deploy:cluster-issuer:
    desc: Deploy Let's Encrypt cluster issuer
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/cert-manager/cluster-issuer.yaml

  # Rollout tasks
  rollout:restart:items-app:
    desc: Restart items-app deployment
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} rollout restart deployment/items-app

  rollout:restart:website-app:
    desc: Restart website-app deployment
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} rollout restart deployment/website-app

  rollout:status:items-app:
    desc: Check rollout status for items-app
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} rollout status deployment/items-app

  rollout:status:website-app:
    desc: Check rollout status for website-app
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} rollout status deployment/website-app

  # DNS and networking tasks
  dns:clear-cache:
    desc: Clear DNS cache (macOS)
    cmds:
      - ./scripts/clear-dns-cache.sh

  dns:check:
    desc: Check DNS resolution for roussev.com
    cmds:
      - dig @8.8.8.8 roussev.com A +short
      - dig @1.1.1.1 roussev.com A +short
      - dig roussev.com A +short

  # Health check tasks
  health:items-app:
    desc: Check health of items-app (local)
    cmds:
      - curl -s https://app.roussev.com/items/v1/health | jq

  health:website-app:
    desc: Check health of website-app (local)
    cmds:
      - curl -s https://roussev.com/health | jq

  clean:docker:
    desc: Clean Docker images
    cmds:
      - docker rmi items-app:local website-app:local || true

  # Port forwarding tasks
  port-forward:items-app:
    desc: Port forward to items-app pod
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} port-forward svc/items-app 8080:80

  port-forward:website-app:
    desc: Port forward to website-app pod
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} port-forward svc/website-app 8080:80

  # SSH tasks
  ssh:
    desc: SSH into the K3s server
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - ssh -i ssh_key.pem -o StrictHostKeyChecking=no root@$(terraform output -raw server_ip)

  # Hetzner CSI Driver tasks
  deploy:hetzner-csi:
    desc: Install Hetzner CSI driver (required for Hetzner Cloud Volumes)
    cmds:
      - echo "⚠️  Make sure you have created the hcloud secret first!"
      - echo "Run - kubectl --kubeconfig={{.KUBECONFIG}} create secret generic hcloud --from-literal=token=YOUR_HETZNER_API_TOKEN -n kube-system"
      - echo ""
      - echo "Installing Hetzner CSI driver..."
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f https://raw.githubusercontent.com/hetznercloud/csi-driver/main/deploy/kubernetes/hcloud-csi.yml
      - echo "Waiting for CSI driver to be ready..."
      - kubectl --kubeconfig={{.KUBECONFIG}} wait --namespace kube-system --for=condition=ready pod --selector=app=hcloud-csi-controller --timeout=300s
      - echo "✅ Hetzner CSI driver installed successfully!"
      - kubectl --kubeconfig={{.KUBECONFIG}} get storageclass

  check:hetzner-csi:
    desc: Check if Hetzner CSI driver is installed
    cmds:
      - echo "Checking Hetzner CSI driver..."
      - kubectl --kubeconfig={{.KUBECONFIG}} get pods -n kube-system | grep hcloud || echo "❌ Hetzner CSI driver not found"
      - echo ""
      - echo "Storage classes:"
      - kubectl --kubeconfig={{.KUBECONFIG}} get storageclass

  # PostgreSQL tasks
  postgres:create-secret:
    desc: Create PostgreSQL secret from .env file
    cmds:
      - |
        set -a
        source .env
        set +a
        kubectl --kubeconfig={{.KUBECONFIG}} create secret generic postgres-secret \
          --from-literal=POSTGRES_USER="$POSTGRES_USER" \
          --from-literal=POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
          --from-literal=POSTGRES_DB="$POSTGRES_DB" \
          --dry-run=client -o yaml | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -
      - echo "✅ PostgreSQL secret created/updated successfully"

  postgres:delete-secret:
    desc: Delete PostgreSQL secret
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} delete secret postgres-secret --ignore-not-found=true
      - echo "✅ PostgreSQL secret deleted"

  deploy:postgres:
    desc: Deploy PostgreSQL with persistent storage
    deps:
      - postgres:create-secret
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/storage/postgres-pv.yaml
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/storage/postgres-pvc.yaml
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f {{.K8S_DIR}}/storage/postgres-statefulset.yaml
      - echo "Waiting for PostgreSQL to be ready..."
      - kubectl --kubeconfig={{.KUBECONFIG}} wait --for=condition=ready pod -l app=postgres --timeout=300s
      - echo "✅ PostgreSQL deployed successfully"

  k8s:get-pv:
    desc: Get all persistent volumes
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get pv

  k8s:get-pvc:
    desc: Get all persistent volume claims
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get pvc

  k8s:logs:postgres:
    desc: Get logs from PostgreSQL
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} logs -l app=postgres --tail=100 -f

  k8s:describe:postgres:
    desc: Describe PostgreSQL statefulset
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} describe statefulset postgres

  postgres:connect:
    desc: Connect to PostgreSQL using psql
    cmds:
      - |
        POSTGRES_USER=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_USER}' | base64 -d)
        POSTGRES_DB=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_DB}' | base64 -d)
        kubectl --kubeconfig={{.KUBECONFIG}} exec -it postgres-0 -- psql -U "$POSTGRES_USER" -d "$POSTGRES_DB"

  postgres:status:
    desc: Check PostgreSQL status
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} get pv
      - kubectl --kubeconfig={{.KUBECONFIG}} get pvc
      - kubectl --kubeconfig={{.KUBECONFIG}} get statefulset postgres
      - kubectl --kubeconfig={{.KUBECONFIG}} get pods -l app=postgres
      - kubectl --kubeconfig={{.KUBECONFIG}} get svc postgres
      - echo ""
      - echo "PostgreSQL Credentials (from secret):"
      - |
        POSTGRES_USER=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_USER}' | base64 -d)
        POSTGRES_DB=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_DB}' | base64 -d)
        echo "  User: $POSTGRES_USER"
        echo "  Database: $POSTGRES_DB"

  postgres:port-forward:
    desc: Port forward to PostgreSQL
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} port-forward svc/postgres 5432:5432

  postgres:backup:
    desc: Backup PostgreSQL database
    cmds:
      - |
        POSTGRES_USER=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_USER}' | base64 -d)
        POSTGRES_DB=$(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_DB}' | base64 -d)
        BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
        kubectl --kubeconfig={{.KUBECONFIG}} exec postgres-0 -- pg_dump -U "$POSTGRES_USER" "$POSTGRES_DB" > "$BACKUP_FILE"
        echo "✅ Backup saved to $BACKUP_FILE"

  postgres:disk-usage:
    desc: Check PostgreSQL disk usage
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} exec postgres-0 -- df -h /var/lib/postgresql/data

  postgres:show-credentials:
    desc: Show PostgreSQL credentials from secret
    cmds:
      - |
        echo "PostgreSQL Credentials:"
        echo "  User: $(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_USER}' | base64 -d)"
        echo "  Password: $(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_PASSWORD}' | base64 -d)"
        echo "  Database: $(kubectl --kubeconfig={{.KUBECONFIG}} get secret postgres-secret -o jsonpath='{.data.POSTGRES_DB}' | base64 -d)"
        echo ""
        echo "⚠️  Keep these credentials secure!"

